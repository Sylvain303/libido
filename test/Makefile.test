# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = /usr/src/gtest

# Where to find user code.
SRC_DIR = ../src

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include -I$(SRC_DIR)

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = test_buf_string test_collected_lines

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = /usr/include/gtest/*.h \
                /usr/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

# ------------------------------------------------------------------

# Lib in src/
$(SRC_DIR)/buf_string.o : $(SRC_DIR)/buf_string.c $(SRC_DIR)/buf_string.h
	$(MAKE) -C $(SRC_DIR) buf_string.o
$(SRC_DIR)/function_lines.o : $(SRC_DIR)/function_lines.c $(SRC_DIR)/function_lines.h
	$(MAKE) -C $(SRC_DIR) function_lines.o

# the test in test/
test_buf_string.o : test_buf_string.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c test_buf_string.cc

# Linking the final EXE
test_buf_string : test_buf_string.o $(SRC_DIR)/buf_string.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -lpthread -o $@

# collected_lines
test_collected_lines.o : test_collected_lines.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c test_collected_lines.cc $$(pkg-config --cflags glib-2.0)

# Linking the final EXE
test_collected_lines : test_collected_lines.o $(SRC_DIR)/buf_string.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -lpthread $$(pkg-config --libs glib-2.0) -o $@

test_function_lines.o : test_function_lines.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c test_function_lines.cc $$(pkg-config --cflags glib-2.0)
test_function_lines : test_function_lines.o gtest_main.a $(SRC_DIR)/buf_string.o $(SRC_DIR)/function_lines.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -lpthread $$(pkg-config --libs glib-2.0) -o $@
